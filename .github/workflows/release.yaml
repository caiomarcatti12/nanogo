name: Release

on:
  pull_request:
    types: [closed]  # Executa o workflow quando uma PR é fechada
  push:
    branches:
      - main  # Executa o workflow quando há um push direto na branch main

permissions:
  contents: write  # Permissões para ler e escrever em conteúdos, incluindo tags e releases
  pull-requests: read

jobs:
  release:
    if: github.event.pull_request.merged == true && github.event.pull_request.base.ref == 'main' || github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest

    steps:
    - name: Checkout no repository
      uses: actions/checkout@v3

    - name: Configurar Go
      uses: actions/setup-go@v4
      with:
        go-version: 1.22.5

    - name: Install dependencies
      run: go mod download

    - name: Compilar o código
      run: go build -o nanogo ./cmd/webserver

    - name: Configurar Git
      run: |
        git config user.name "GitHub Actions"
        git config user.email "actions@github.com"

    - name: Determinar tipo de bump de versão
      id: determine-version-bump
      run: |
        if [[ "${GITHUB_REF_NAME}" == *"fix/"* ]]; then
          echo "bump_type=patch" >> $GITHUB_ENV
        elif [[ "${GITHUB_REF_NAME}" == *"feat/"* ]]; then
          echo "bump_type=minor" >> $GITHUB_ENV
        elif [[ "${GITHUB_REF_NAME}" == *"release/"* ]]; then
          echo "bump_type=major" >> $GITHUB_ENV
        else
          echo "bump_type=patch" >> $GITHUB_ENV
        fi

    - name: Versão Bump e push tag
      id: version
      uses: anothrNick/github-tag-action@1.70.0
      env:
        DEFAULT_BUMP: ${{ env.bump_type }}
        RELEASE_BRANCHES : release.*
        WITH_V: true
        DRY_RUN: true
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: Instalar GitHub CLI
      run: sudo apt-get install -y gh

    - name: Buscar descrição do PR
      id: pr-description
      if: github.event.pull_request
      run: |
        PR_NUMBER="${{ github.event.pull_request.number }}"
        PR_BODY=$(gh pr view "$PR_NUMBER" --json body -q ".body")
        echo "PR_BODY=$PR_BODY" >> $GITHUB_ENV

    - name: Buscar último commit
      id: last-commit
      run: |
        COMMIT_MESSAGE=$(git log -1 --pretty=format:"%s")
        echo "COMMIT_MESSAGE=$COMMIT_MESSAGE" >> $GITHUB_ENV

    - name: Criar release
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        TAG_NAME="${{ steps.version.outputs.new_tag }}"
        RELEASE_NAME="$TAG_NAME"
        NOTES="${{ env.PR_BODY }}"
        if [ -z "$NOTES" ]; then
          NOTES="${{ env.COMMIT_MESSAGE }}"
        fi
        gh release create "$TAG_NAME" --title "$RELEASE_NAME" --notes "$NOTES"
